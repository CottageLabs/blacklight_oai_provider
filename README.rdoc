BlacklightOaiProvider: OAI-PMH service endpoint for Blacklight applications

= Description

The BlacklightOaiProvider plugin provides an Open Archives Initiative Protocolo for Metadata Harvesting (OAI-PMH) <http://www.openarchives.org/pmh/> data provider endpoint, using the ruby-oai gem, that let serice providers harvest that metadata.

= Requirements

A Rails app using the Blacklight plugin (tested against post-version 2.5).

OAI-PMH requires a timestamp field for all records, the name of which is configurable.

= Installation

This is a plugin, not a gem (because the structure was copied from existing plugins; in theory, it should be possible to make this a gem in the future).

 A couple different ways to get the source into your vendor/plugins directory. 

Go into your application directory, and run: 

./script/plugin install git://github.com/cbeer/blacklight_oai_provider.git

Later you can run ./script/plugin update blacklight_oai_provider if you like. 

Requires git installed on your system. There are other ways to get the plugin in there too.

OR
cd $your_app/vendor/plugins
git clone git://github.com/cbeer/blacklight_oai_provider.git 

= Configuration

You must provide a timestamp field from your solr configuration. In your config/initialiers/blacklight_config.rb, you may configure the field name (default 'timestamp') as config[:oai][:document]. You also must provide OAI-PMH data provider metadata as config[:oai][:provider], e.g.:

config[:oai] = {
    :provider => {
      :repository_name => 'Test',
      :repository_url => 'http://localhost',
      :record_prefix => '',
      :admin_email => 'root@localhost'
    },
    :document => {
      :timestamp => 'timestamp'
    }
  }


== Injection

This plugin assumes it is in a Blacklight Rails app, uses Blacklight methods, Rails methods, and standard ruby module includes to inject it's behaviors into the app.  

You can turn off this injection if you like, although it will make the plugin less (or non-) functional unless you manually do similar injection. See lib/blacklight_oai_provider.rb#inject! to see exactly what's going on. 

In any initializer, you can set:

  BlacklightOaiProvider.omit_inject = true

to turn off all injection. The plugin will be completely non-functional if you do this, of course. But perhaps you could try to re-use some of it's classes in a non-Blacklight, highly hacked Blacklight, or even non-Rails application this way. 

You can also turn off injection of individual components, which could be more useful:
   
  BlacklightOaiProvider.omit_inject = {
    :solrdocument_mixin => false,
    :controller_mixin => false,
    :view_helpers => false
  }

= Tests

There are none. This is bad I know, sorry. You can test OAI-PMH conformance against http://www.openarchives.org/data/registerasprovider.html#Protocol_Conformance_Testing or browse the data at http://re.cs.uct.ac.za/ 


